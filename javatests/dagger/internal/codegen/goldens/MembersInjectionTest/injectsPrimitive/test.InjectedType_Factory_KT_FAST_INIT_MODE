package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class InjectedType_Factory : Factory<Any?> {
  private val primitiveIntProvider: Provider<Int>

  private val boxedIntProvider: Provider<Int?>

  private constructor(primitiveIntProvider: Provider<Int>, boxedIntProvider: Provider<Int?>) {
    this.primitiveIntProvider = primitiveIntProvider
    this.boxedIntProvider = boxedIntProvider
  }

  public override fun `get`(): Any? {
    var instance: Any? = newInstance()
    InjectedType_MembersInjector.injectPrimitiveInt(instance, primitiveIntProvider.get());
    InjectedType_MembersInjector.injectBoxedInt(instance, boxedIntProvider.get());
    return instance
  }

  public companion object {
    @JvmStatic
    public fun create(primitiveIntProvider: Provider<*>, boxedIntProvider: Provider<*>): InjectedType_Factory = InjectedType_Factory((primitiveIntProvider) as Provider<Int>, (boxedIntProvider) as Provider<Int?>)

    @JvmStatic
    public fun newInstance(): Any? = InjectedType()
  }
}

package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class Foo_Factory : Factory<Any?> {
  private val barProvider: Provider<Bar?>

  private constructor(barProvider: Provider<Bar?>) {
    this.barProvider = barProvider
  }

  public override fun `get`(): Any? = newInstance(barProvider.get())

  public companion object {
    @JvmStatic
    public fun create(barProvider: Provider<*>): Foo_Factory = Foo_Factory((barProvider) as Provider<Bar?>)

    @JvmStatic
    public fun newInstance(bar: Any?): Any? = Foo((bar) as Bar?)
  }
}

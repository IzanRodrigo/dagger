package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class GenericClass_Factory<A : Bar?> : Factory<Any?> {
  private val aProvider: Provider<A>

  private constructor(aProvider: Provider<A>) {
    this.aProvider = aProvider
  }

  public override fun `get`(): Any? = newInstance<A>(aProvider.get())

  public companion object {
    @JvmStatic
    public fun <A : Bar?> create(aProvider: Provider<*>): GenericClass_Factory<A> = GenericClass_Factory<A>((aProvider) as Provider<A>)

    @JvmStatic
    public fun <A : Bar?> newInstance(a: Any?): Any? = GenericClass<A>((a) as A)
  }
}

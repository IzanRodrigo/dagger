package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class GenericClass_Factory<A, B> : Factory<Any?> {
  private val aProvider: Provider<A>

  private val bProvider: Provider<B>

  private constructor(aProvider: Provider<A>, bProvider: Provider<B>) {
    this.aProvider = aProvider
    this.bProvider = bProvider
  }

  public override fun `get`(): Any? = newInstance<A, B>(aProvider.get(), bProvider.get())

  public companion object {
    @JvmStatic
    public fun <A, B> create(aProvider: Provider<*>, bProvider: Provider<*>): GenericClass_Factory<A, B> = GenericClass_Factory<A, B>((aProvider) as Provider<A>, (bProvider) as Provider<B>)

    @JvmStatic
    public fun <A, B> newInstance(a: Any?, b: Any?): Any? = GenericClass<A, B>((a) as A, (b) as B)
  }
}

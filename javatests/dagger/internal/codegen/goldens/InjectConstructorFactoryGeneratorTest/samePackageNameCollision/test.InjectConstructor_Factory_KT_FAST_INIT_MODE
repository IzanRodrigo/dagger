package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class InjectConstructor_Factory : Factory<Any?> {
  private val otherPackageProvider: Provider<other.pkg.CommonName?>

  private val samePackageProvider: Provider<CommonName?>

  private constructor(otherPackageProvider: Provider<other.pkg.CommonName?>, samePackageProvider: Provider<CommonName?>) {
    this.otherPackageProvider = otherPackageProvider
    this.samePackageProvider = samePackageProvider
  }

  public override fun `get`(): Any? = newInstance(otherPackageProvider.get(), samePackageProvider.get())

  public companion object {
    @JvmStatic
    public fun create(otherPackageProvider: Provider<*>, samePackageProvider: Provider<*>): InjectConstructor_Factory = InjectConstructor_Factory((otherPackageProvider) as Provider<other.pkg.CommonName?>, (samePackageProvider) as Provider<CommonName?>)

    @JvmStatic
    public fun newInstance(otherPackage: Any?, samePackage: Any?): Any? = InjectConstructor((otherPackage) as other.pkg.CommonName?, (samePackage) as CommonName?)
  }
}

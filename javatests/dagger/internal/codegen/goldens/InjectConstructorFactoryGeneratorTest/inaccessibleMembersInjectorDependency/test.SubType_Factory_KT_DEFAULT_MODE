package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic
import other.SuperType_MembersInjector

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class SubType_Factory : Factory<Any?> {
  private val inaccessibleTypeProvider: Provider<*>

  private constructor(inaccessibleTypeProvider: Provider<*>) {
    this.inaccessibleTypeProvider = inaccessibleTypeProvider
  }

  public override fun `get`(): Any? {
    var instance: Any? = newInstance()
    SuperType_MembersInjector.injectInaccessibleType(instance, inaccessibleTypeProvider.get());
    return instance
  }

  public companion object {
    @JvmStatic
    public fun create(inaccessibleTypeProvider: Provider<*>): SubType_Factory = SubType_Factory((inaccessibleTypeProvider) as Provider<*>)

    @JvmStatic
    public fun newInstance(): Any? = SubType()
  }
}

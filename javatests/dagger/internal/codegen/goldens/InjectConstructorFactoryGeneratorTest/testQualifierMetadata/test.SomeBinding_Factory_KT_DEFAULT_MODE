package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Double
import kotlin.Float
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata(value = ["test.ConstructorParameterQualifier"])
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class SomeBinding_Factory : Factory<Any?> {
  private val dProvider: Provider<Double?>

  private val injectFieldProvider: Provider<String?>

  private val fProvider: Provider<Float?>

  private constructor(
    dProvider: Provider<Double?>,
    injectFieldProvider: Provider<String?>,
    fProvider: Provider<Float?>,
  ) {
    this.dProvider = dProvider
    this.injectFieldProvider = injectFieldProvider
    this.fProvider = fProvider
  }

  public override fun `get`(): Any? {
    var instance: Any? = newInstance(dProvider.get())
    SomeBinding_MembersInjector.injectInjectField(instance, injectFieldProvider.get());
    SomeBinding_MembersInjector.injectInjectMethod(instance, fProvider.get());
    return instance
  }

  public companion object {
    @JvmStatic
    public fun create(
      dProvider: Provider<*>,
      injectFieldProvider: Provider<*>,
      fProvider: Provider<*>,
    ): SomeBinding_Factory = SomeBinding_Factory((dProvider) as Provider<Double?>, (injectFieldProvider) as Provider<String?>, (fProvider) as Provider<Float?>)

    @JvmStatic
    public fun newInstance(d: Any?): Any? = SomeBinding((d) as Double?)
  }
}

package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class GenericClass_Factory<T1, T2 : Bar<T1?>?> : Factory<Any?> {
  private val t1Provider: Provider<T1>

  private val t2Provider: Provider<T2>

  private constructor(t1Provider: Provider<T1>, t2Provider: Provider<T2>) {
    this.t1Provider = t1Provider
    this.t2Provider = t2Provider
  }

  public override fun `get`(): Any? = newInstance<T1, T2>(t1Provider.get(), t2Provider.get())

  public companion object {
    @JvmStatic
    public fun <T1, T2 : Bar<T1?>?> create(t1Provider: Provider<*>, t2Provider: Provider<*>): GenericClass_Factory<T1, T2> = GenericClass_Factory<T1, T2>((t1Provider) as Provider<T1>, (t2Provider) as Provider<T2>)

    @JvmStatic
    public fun <T1, T2 : Bar<T1?>?> newInstance(t1: Any?, t2: Any?): Any? = GenericClass<T1, T2>((t1) as T1, (t2) as T2)
  }
}

package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class Foo_Factory {
  private val argProvider: Provider<Bar?>

  private constructor(argProvider: Provider<Bar?>) {
    this.argProvider = argProvider
  }

  public fun `get`(argProvider2: Any?): Any? = newInstance(argProvider.get(), (argProvider2) as Int?)

  public companion object {
    @JvmStatic
    public fun create(argProvider: Provider<*>): Foo_Factory = Foo_Factory((argProvider) as Provider<Bar?>)

    @JvmStatic
    public fun newInstance(arg: Any?, argProvider: Any?): Any? = Foo((arg) as Bar?, (argProvider) as Int?)
  }
}

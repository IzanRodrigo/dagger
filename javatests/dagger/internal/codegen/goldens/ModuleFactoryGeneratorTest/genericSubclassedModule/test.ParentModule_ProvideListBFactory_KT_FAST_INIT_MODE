package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Preconditions
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.CharSequence
import kotlin.Comparable
import kotlin.Number
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class ParentModule_ProvideListBFactory<A : CharSequence?, B, C> : Factory<Any?> where C : Number?, C : Comparable<C?>? {
  private val module: ParentModule<A, B, C>

  private val bProvider: Provider<B>

  private constructor(module: ParentModule<A, B, C>, bProvider: Provider<B>) {
    this.module = module
    this.bProvider = bProvider
  }

  public override fun `get`(): Any? = provideListB<A, B, C>(module, bProvider.get())

  public companion object {
    @JvmStatic
    public fun <A : CharSequence?, B, C> create(module: Any?, bProvider: Provider<*>): ParentModule_ProvideListBFactory<A, B, C> where C : Number?, C : Comparable<C?>? = ParentModule_ProvideListBFactory<A, B, C>((module) as ParentModule<A, B, C>, (bProvider) as Provider<B>)

    @JvmStatic
    public fun <A : CharSequence?, B, C> provideListB(instance: Any?, b: Any?): Any? where C : Number?, C : Comparable<C?>? = Preconditions.checkNotNullFromProvides(((instance) as ParentModule<A, B, C>).provideListB((b) as B))
  }
}

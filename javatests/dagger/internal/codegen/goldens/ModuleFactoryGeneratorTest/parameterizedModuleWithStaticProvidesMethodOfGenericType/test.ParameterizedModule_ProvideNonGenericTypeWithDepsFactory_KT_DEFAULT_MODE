package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Preconditions
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class ParameterizedModule_ProvideNonGenericTypeWithDepsFactory : Factory<Any?> {
  private val oProvider: Provider<Any?>

  private constructor(oProvider: Provider<Any?>) {
    this.oProvider = oProvider
  }

  public override fun `get`(): Any? = provideNonGenericTypeWithDeps(oProvider.get())

  public companion object {
    @JvmStatic
    public fun create(oProvider: Provider<*>): ParameterizedModule_ProvideNonGenericTypeWithDepsFactory = ParameterizedModule_ProvideNonGenericTypeWithDepsFactory((oProvider) as Provider<Any?>)

    @JvmStatic
    public fun provideNonGenericTypeWithDeps(o: Any?): Any? = Preconditions.checkNotNullFromProvides(ParameterizedModule.provideNonGenericTypeWithDeps((o) as Any?))
  }
}

package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class TestModule_ProvideStringFactory : Factory<Any?> {
  private val module: TestModule

  private constructor(module: TestModule) {
    this.module = module
  }

  @Nullable
  public override fun `get`(): Any? = provideString(module)

  public companion object {
    @JvmStatic
    public fun create(module: Any?): TestModule_ProvideStringFactory = TestModule_ProvideStringFactory((module) as TestModule)

    @Nullable
    @JvmStatic
    public fun provideString(instance: Any?): Any? = ((instance) as TestModule).provideString()
  }
}

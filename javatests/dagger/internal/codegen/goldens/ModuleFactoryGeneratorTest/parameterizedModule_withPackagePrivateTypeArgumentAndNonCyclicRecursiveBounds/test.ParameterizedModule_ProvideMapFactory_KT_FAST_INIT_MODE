package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Preconditions
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class ParameterizedModule_ProvideMapFactory<T1, T2 : Bar<T1?>?> : Factory<Any?> {
  private val module: ParameterizedModule<T1, T2>

  private val t1Provider: Provider<T1>

  private constructor(module: ParameterizedModule<T1, T2>, t1Provider: Provider<T1>) {
    this.module = module
    this.t1Provider = t1Provider
  }

  public override fun `get`(): Any? = provideMap<T1, T2>(module, t1Provider.get())

  public companion object {
    @JvmStatic
    public fun <T1, T2 : Bar<T1?>?> create(module: Any?, t1Provider: Provider<*>): ParameterizedModule_ProvideMapFactory<T1, T2> = ParameterizedModule_ProvideMapFactory<T1, T2>((module) as ParameterizedModule<T1, T2>, (t1Provider) as Provider<T1>)

    @JvmStatic
    public fun <T1, T2 : Bar<T1?>?> provideMap(instance: Any?, t1: Any?): Any? = Preconditions.checkNotNullFromProvides(((instance) as ParameterizedModule<T1, T2>).provideMap((t1) as T1))
  }
}

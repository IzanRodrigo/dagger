package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Preconditions
import dagger.`internal`.Provider
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata(value = [
    "test.MethodQualifier",
    "test.ParamQualifier"
])
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class MyModule_ProvideStringFactory : Factory<Any?> {
  private val iProvider: Provider<Int>

  private constructor(iProvider: Provider<Int>) {
    this.iProvider = iProvider
  }

  public override fun `get`(): Any? = provideString(iProvider.get())

  public companion object {
    @JvmStatic
    public fun create(iProvider: Provider<*>): MyModule_ProvideStringFactory = MyModule_ProvideStringFactory((iProvider) as Provider<Int>)

    @JvmStatic
    public fun provideString(i: Any?): Any? = Preconditions.checkNotNullFromProvides(MyModule.provideString((i) as Int))
  }
}

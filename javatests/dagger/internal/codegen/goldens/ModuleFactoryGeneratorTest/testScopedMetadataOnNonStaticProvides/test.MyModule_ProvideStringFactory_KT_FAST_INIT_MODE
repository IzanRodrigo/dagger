package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.Preconditions
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata(value = "javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class MyModule_ProvideStringFactory : Factory<Any?> {
  private val module: MyModule

  private constructor(module: MyModule) {
    this.module = module
  }

  public override fun `get`(): Any? = provideString(module)

  public companion object {
    @JvmStatic
    public fun create(module: Any?): MyModule_ProvideStringFactory = MyModule_ProvideStringFactory((module) as MyModule)

    @JvmStatic
    public fun provideString(instance: Any?): Any? = Preconditions.checkNotNullFromProvides(((instance) as MyModule).provideString())
  }
}

package test

import dagger.`internal`.DaggerGenerated
import dagger.`internal`.Factory
import dagger.`internal`.QualifierMetadata
import dagger.`internal`.ScopeMetadata
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmStatic

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
  value = ["dagger.internal.codegen.ComponentProcessor"],
  comments = "https://dagger.dev",
)
@Suppress(names = [
    "UNCHECKED_CAST",
    "USELESS_CAST",
    "DEPRECATION"
])
public class TestModule_PrimitiveIntegerFactory : Factory<Any?> {
  public override fun `get`(): Any? = primitiveInteger()

  private object InstanceHolder {
    public val INSTANCE: TestModule_PrimitiveIntegerFactory = TestModule_PrimitiveIntegerFactory()
  }

  public companion object {
    @JvmStatic
    public fun create(): TestModule_PrimitiveIntegerFactory = InstanceHolder.INSTANCE

    @JvmStatic
    public fun primitiveInteger(): Int = TestModule.primitiveInteger()
  }
}
